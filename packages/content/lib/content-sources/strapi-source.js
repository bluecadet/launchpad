/**
 * @module strapi-source
 */

import chalk from 'chalk';
import jsonpath from 'jsonpath';
import got from 'got';

import ContentSource, { SourceOptions } from './content-source.js';
import ContentResult, { MediaDownload } from './content-result.js';
import Credentials from '../credentials.js';
import { Logger } from '@bluecadet/launchpad-utils';

/**
 * Options for StrapiSource
 */
export class StrapiOptions extends SourceOptions {
	constructor({
		version = '3',
    baseUrl = undefined,
    queries = [],
		limit = 100,
		maxNumPages = -1,
		pageNumZeroPad = 0,
		identifier = undefined,
		password = undefined,
    token = undefined,
		...rest
  } = {}) {
    super(rest);
    
		/**
		 * Only version 3 is supported currently. Defaults to '3'
		 * @type {string}
		 */
		this.version = version;
		
		/**
		 * The base url of your Strapi CMS (with or without trailing slash).
		 * @type {string}
		 */
		this.baseUrl = baseUrl;
		
		/**
		 * Queries for each type of content you want to save. One per content type. Content will be stored  as numbered, paginated JSONs. You can include all query parameters supported by Strapi: https://docs-v3.strapi.io/developer-docs/latest/developer-resources/content-api/content-api.html#api-parameters
		 * @type {Array.<string>}
		 */
		this.queries = queries;
		
		/**
		 * Max number of entries per page. Default is 100.
		 * @type {number}
		 */
		this.limit = limit;
		
		/**
		 * Max number of pages. Default is -1 for all pages
		 * @type {number}
		 */
		this.maxNumPages = maxNumPages;
		
		/**
		 * How many zeros to pad each json filename index with. Default is 0
		 * @type {number}
		 */
		this.pageNumZeroPad = pageNumZeroPad;
		
		/**
		 * Username or email. Should be configured via credentials.json
		 * @type {string}
		 */
		this.identifier = identifier;
		
		/**
		 * Should be configured via credentials.json
		 * @type {string}
		 */
		this.password = password;
		
		/**
		 * Can be used instead of identifer/password if you previously generated one. Otherwise this will be automatically generated using the identifier or password.
		 * @type {string}
		 */
    this.token = token;
  }
}

class StrapiSource extends ContentSource {
	
	/**
	 * 
	 * @param {*} config 
	 * @param {Logger} logger
	 */
  constructor(config, logger) {
    super(StrapiSource._assembleConfig(config), logger);
		
		if (!this.config.version || parseInt(this.config.version) !== 3) {
			throw new Error(`Strapi content source only supports Strapi v3 (requested version '${this.config.version}')`);
		}
		if (!this.config.queries || !this.config.queries.length) {
			throw new Error('No content queries defined');
		}
  }

  /**
   * @returns {Promise<ContentResult>}
   */
  async fetchContent() {
		const result = new ContentResult();
		
		if (!this.config.token) {
			this.config.token = await this._getJwt(this.config.identifier, this.config.password);
		}
		
		for (const query of this.config.queries) {
			await this._fetchPages(query, this.config.token, result, {
				start: 0,
				limit: this.config.limit
			});
		}
		
		return result;
  }

  /**
   * Recursively fetches content using the Strapi client.
   *
   * @param {string} query
	 * @param {string} jwt The JSON web token generated by Strapi
   * @param {ContentResult} result
   * @param {Object} params
   * @returns {Promise<Object>} Object with an 'entries' and an 'assets' array.
   */
  async _fetchPages(
		query,
		jwt,
		result,
		params = {start: 0, limit: 100},
	) {
		const pageNum = params.start / params.limit;
		const url = new URL(query, this.config.baseUrl);
		
		if (!url.searchParams.has('_start')) {
			url.searchParams.append('_start', params.start);
		}
		if (!url.searchParams.has('_limit')) {
			url.searchParams.append('_limit', params.limit);
		}
		
		const contentType = url.pathname;
		const fileName = `${contentType}-${pageNum.toString().padStart(this.config.pageNumZeroPad, '0')}.json`;
		
		this.logger.debug(`Fetching page ${pageNum} of ${contentType}`);
		
    return got(url.toString(), {
				headers: {
					Authorization: `Bearer ${jwt}`
				}
			})
			.json()
			.then((content) => {
				if (!content || !content.length) {
					// Empty result or no more pages left
					return Promise.resolve(result);
				}
				
        result.addDataFile(fileName, content);
        result.addMediaDownloads(
					this._getMediaUrls(content).map(url => new MediaDownload({url}))
				);
				
				if (this.config.maxNumPages < 0 || pageNum < this.config.maxNumPages - 1) {
					// Fetch next page
					params.start = params.start || 0;
					params.start += params.limit;
					return this._fetchPages(query, jwt, result, params);
				} else {
					// Return combined entries + assets
					return Promise.resolve(result);
				}
			})
			.catch((error) => {
				this.logger.error(chalk.red(`Could not fetch page: ${error ? error.message || '' : ''}`));
			});
  }
	
	/**
	 * 
	 * @param {Object} content 
	 * @return @type {Array.<string>}
	 */
	_getMediaUrls(content) {
		const contentUrls = jsonpath.query(content, '$..url');
		const mediaUrls = [];
		for (let contentUrl of contentUrls) {
			if (contentUrl.startsWith('/')) {
				const url = new URL(contentUrl, this.config.baseUrl);
				contentUrl = url.toString();
			}
			mediaUrls.push(contentUrl);
		}
		return mediaUrls;
	}
	
	async _getJwt(identifier, password) {
		this.logger.info(chalk.gray(`Retrieving JWT for ${identifier}...`));
		
		const url = new URL('/auth/local', this.config.baseUrl);
		
		return got
			.post(url.toString(), {
				form: {
					identifier,
					password
				}
			})
			.json()
			.then(response => {
				this.logger.info(chalk.green(`...retrieved JWT for ${chalk.white(identifier)}`));
				return response.jwt;
			})
			.catch(error => {
				this.logger.info(chalk.red(`Could not retrieve JWT for ${chalk.white(identifier)}`));
				this.logger.info(chalk.yellow(error));
				throw error;
			});
	}
  
	/**
	 * 
	 * @param {*} config 
	 * @returns {StrapiOptions}
	 */
  static _assembleConfig(config) {
    return new StrapiOptions({
      ...config,
      ...Credentials.getCredentials(config.id),
    });
  }
}

export default StrapiSource;
