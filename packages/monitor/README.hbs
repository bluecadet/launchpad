# Launchpad Monitor

The [`@bluecadet/launchpad-monitor`](https://www.npmjs.com/package/@bluecadet/launchpad-monitor) package launches and monitors any number of apps.

Under the hood, it uses PM2 for process management, and adds a few features like window foregrounding and minimizing.

## Configuration

1. Create a `monitor` section in your `launchpad.json` (see [`MonitorOptions`](#MonitorOptions)).
2. Add a list of app option objects in `monitor.apps` (see [`AppOptions`](#AppOptions)).
3. Each app requires a `pm2` block, which requires a `name` and `script` as a minimum. See [PM2 docs](https://pm2.keymetrics.io/docs/usage/application-declaration/#attributes-available) for all supported settings.
4. Run `npx launchpad monitor` (or `npx launchpad` to update content first if configured)

```json
{
  "monitor": {
    "apps": [
      {
        "pm2": {
          "name": "my-app",
          "script": "my-app.exe"
        }
      }
    ]
  }
}
```

Apps will be relaunched individually as soon as they exit.

{{>class-members name="MonitorOptions"}}
{{>class-members name="AppOptions"}}
{{>class-members name="WindowOptions"}}

## Example: Monitor Two Apps

The following `launchpad.json` will launch and monitor two apps. The first app window will be foregrounded after launch, the second app will be minimized. If any of the apps exit, PM2 will relaunch them.

```json
{
  "monitor": {
    "apps": [
      {
        "pm2": {
          "name": "main-app",
          "script": "my-main-app.exe",
          "cwd": "../apps/"
        },
        "windows": {
          "foreground": true
        }
      },
      {
        "pm2": {
          "name": "side-app",
          "script": "my-side-app.exe",
          "cwd": "../apps/",
          "args": "--custom-arg=true"
        },
        "windows": {
          "minimize": true
        }
      }
    ]
  }
}
```

## Logging App Output

To capture your apps' logs in Launchpad Monitor you need to ensure that your apps are routing them to `stdout` and `stderr`.

### Unity

To redirect Unity's logs to stdout and stderr, launch your app using the `-logfile -` argument:

```json
{
  "monitor": {
    "apps": [
      {
        "name": "unity-app",
        "script": "UnityPM2Test.exe",
        "args": "-logfile -"
      }
    ]
  }
}
```

### Cinder

- Cinder doesn't route logs directly to `std::cout` and `std::cerr` by default, so this has to be done manually. See [here](https://github.com/bluecadet/Cinder-BluecadetViews/blob/2333604abc44a719e18df67566135ea34d545085/src/bluecadet/core/BaseApp.cpp#L22-L39) for an example for how to create one, and [here](https://github.com/bluecadet/Cinder-BluecadetViews/blob/2333604abc44a719e18df67566135ea34d545085/src/bluecadet/core/BaseApp.cpp#L86) for how to add it.
- If you use [Cinder-BluecadetViews](https://github.com/bluecadet/Cinder-BluecadetViews), all logs are routed to `stdout`/`stderr` via the `logToStdOut` setting. This is set to `true` by default and can otherwise be configured in `settings.json` or via cli flag: `my-app.exe console=false logToStdOut=true`

## Adanced Configuration

See below for further settings that can be configured globally and on a per-app level.

{{>class-members name="WindowsApiOptions"}}

{{>class-members name="AppLogOptions"}}
